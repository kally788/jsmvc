var js;if(!js){js={}};if(!js.model){js.model={}};if(!js.page){js.page={}};if(!js.tpl){js.tpl={}};
js.model.ContList=function(){var protected;this.onCreate=function(p){protected=p;p.setData({"$jsmvc$.core.ModelAbs":{"statement":"class","desc":"Model&nbsp;模块超类，负责数据业务处理和与服务器通信，注册到框架上的&nbsp;model&nbsp;均为单例。所有通过&nbsp;$jsmvc$.facade.reqModel&nbsp;注册的模块都会自动继承该超类","exte":"","evt":{"pro":[],"pub":[{"ret":{"desc":"提供给子类保护访问的属性或函数集合","type":"object"},"desc":"当模块被创建时触发，不可显式调用。模块的初始化操作应放在该事件中进行处理，您可以在子类重写该事件","param":[{"desc":"父类链中需要提供保护访问的属性或函数集合","name":"parent","type":"object"}],"name":"onCreate","example":[[{"desc":"创建一个名称为&nbsp;ExampleA&nbsp;的&nbsp;model&nbsp;类，并把私有函数通过&nbsp;onCreate&nbsp;传递给子类","code":" js.model.ExampleA = function () {\n      //定义一个可以被子类所访问的私有函数\n      var test = function(){\n          return \"my is ExampleA\";\n      }\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //模块的初始化操作\n          //...\n          //提供给子类访问的私有函数集合\n          return {test:test}\n      }\n };"},{"desc":"创建一个名称为&nbsp;ExampleB&nbsp;的&nbsp;model&nbsp;类并继承&nbsp;ExampleA","code":" js.model.ExampleB = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //继承父类的私有函数\n          protected = parent;\n          //模块的初始化操作\n          //...\n          //调用父类的私有函数并打印返回值到控制台\n          console.log(protected.test());\n      }\n }.extends(\"js.model.ExampleA\");//继承 ExampleA"}]]},{"desc":"模块销毁。通过&nbsp;$jsmvc$.facade.delModel&nbsp;删除模块时触发，可显式调用","param":[],"name":"onDestroy","example":[[{"desc":"创建一个名称为&nbsp;Hi&nbsp;的&nbsp;model&nbsp;类","code":" js.model.Hi = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n      }\n      //重写 onDestroy 事件，如果没有需要自定义的销毁业务，不必重新该事件\n      this.onDestroy = function(){\n          //模块销毁前的业务处理\n          console.log(\"模块即将删除！~\");\n          //重写 onDestroy 时必须显式调用父类的 onDestroy\n          this.supers.onDestroy();\n          //模块销毁后的业务处理\n          console.log(\"模块被删除了！~\");\n      }\n };"},{"desc":"在框架启动时注册&nbsp;Hi&nbsp;模块","code":" $jsmvc$.run.addFacade(function(){\n      this.startup = function(){\n          //注册 Hi 模块\n          $jsmvc$.facade.reqModel(\"js.model.Hi\");\n      }\n });"},{"desc":"在其它任意模块中，通过调用&nbsp;$jsmvc$.facade.delModel&nbsp;来删除该模块","code":"     //删除 model 模块\n     $jsmvc$.facade.delModel(\"js.model.Hi\");"},{"desc":"或者直接调用&nbsp;onDestroy&nbsp;来删除","code":"     //删除 model 模块\n     var p = $jsmvc$.facade.reqModel(\"js.model.Hi\");\n     p.onDestroy();"}]]}]},"attr":{"sta":[],"pro":[],"pub":[{"desc":"模块类名全路径字符串，如：a.b.c","name":"className","type":"string"},{"desc":"公共函数集合，当您在子类需要重写父类公共函数时，可以通过&nbsp;supers&nbsp;集合来调用父类的函数","name":"supers","type":"object"}]},"func":{"sta":[],"pro":[{"desc":"添加/覆盖数据。&nbsp;setData&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"任意类型","name":"v","type":"{*}"}],"name":"setData","example":[[{"desc":"在模块创建时初始化添加一个数据对象","code":" js.model.Hi = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          //初始化时添加一个数据对象\n          parent.setData({v:\"hello!~\"});\n      }\n };"}]]},{"ret":{"desc":"任意类型","type":"{*}"},"desc":"获取数据。&nbsp;getData&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[],"name":"getData","example":[[{"desc":"在模块创建时初始化添加一个数据对象，并提供外部访问函数","code":" js.model.Hi = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          protected = parent;\n          //初始化时添加一个数据对象\n          protected.setData({v:\"hello!~\"});\n      }\n      //创建一个公共函数来对外提供数据获取\n      this.getV = function(){\n          return protected.getData().v;\n      }\n };"},{"desc":"在其它位置获取模块数据","code":" //在控制台打印 Hi 模块提供的数据\n console.log($jsmvc$.facade.reqModel(\"js.model.Hi\").getV());"}]]}],"pub":[]},"example":[[{"desc":"在&nbsp;js/model&nbsp;目录中新建一个&nbsp;Hi&nbsp;类，用来向其它模块提供数据内容","code":" js.model.Hi = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          protected = parent;\n          //初始化时添加一个数据对象\n          protected.setData({v:\"hello!~\"});\n      }\n      //创建一个公共函数来对外提供数据获取\n      this.getV = function(){\n          return protected.getData().v;\n      }\n };"},{"desc":"在任何模块中都可以获取到&nbsp;Hi&nbsp;模块的数据","code":" //在控制台打印 Hi 模块提供的数据\n console.log($jsmvc$.facade.reqModel(\"js.model.Hi\").getV());"}]],"notice":[]},"$jsmvc$.run":{"statement":"object","desc":"$jsmvc$/run.js&nbsp;是一个负责加载资源和启动框架的全局对象。您可以通过&nbsp;$jsmvc$.run&nbsp;来访问&nbsp;run&nbsp;所提供的方法。","exte":"","evt":{"pro":[],"pub":[{"desc":"当框架开始加载资源时触发该事件","param":[{"desc":"总要加载的资源数量","name":"total","type":"number"},{"desc":"当前加载的资源数量","name":"progress","type":"number"}],"name":"onLoading","example":[[{"desc":"","code":" $jsmvc$.run.onLoading = function(total, progress){\n      //您可以根据实际需求来处理加载进度界面\n      console.log(\"total:\"+total, \"progress:\"+progress);\n }"}]]},{"desc":"当框架加载某个资源失败时触发该事件，产生该事件后程序终止","param":[{"desc":"加载失败的资源URL地址","name":"url","type":"string"}],"name":"onLoadFail","example":[[{"desc":"","code":" $jsmvc$.run.onLoadFail = function(url){\n      //您可以根据实际需求来处理加载错误界面\n      console.log(url);\n }"}]]},{"desc":"当框架加载资源超时触发该事件，该事件只会产生一次。超时时间可以通过&nbsp;setLoadTimeout&nbsp;设置","param":[{"desc":"加载超时后仍未完成加载的URL集合","name":"urlObject","type":"object"}],"name":"onLoadTimeout","example":[[{"desc":"","code":" $jsmvc$.run.onLoadTimeout = function(urlObject){\n      //您可以根据实际需求来处理超时加载提示\n      console.log(JSON.stringify(urlObject));\n }"}]]},{"desc":"当框架不兼容指定IE版本时触发该事件，产生该事件后程序终止。IE版本限制可通过&nbsp;setIEVerLimit&nbsp;设置","param":[],"name":"onCompatibility","example":[[{"desc":"","code":" $jsmvc$.run.onCompatibility = function(){\n      //您可以根据实际需求来处理浏览器不兼容提示\n      console.log(\"compatibility\");\n }"}]]}]},"attr":{"sta":[],"pro":[],"pub":[{"desc":"加载资源超时的时间设置（毫秒），默认为&nbsp;60000","name":"setLoadTimeout","type":"number"},{"desc":"限制低的IE版本。最低为6，设置低于6时默认为6，默认8","name":"setIEVerLimit","type":"number"},{"desc":"如果设置为true，可以通过浏览器前进后退按钮来切换页面，默认为true","name":"setBackHistory","type":"boolean"}]},"func":{"sta":[],"pro":[],"pub":[{"desc":"加载资源文件并启动程序，该方法只允许被调用一次，放在&nbsp;body&nbsp;标签的&nbsp;onLoad&nbsp;事件中执行","param":[{"desc":"要加载的CSS文件URL列表","name":"css","type":"array"},{"desc":"要加载的JS文件URL列表（二维数组）","name":"js","type":"array"},{"desc":"要加载的HTML文件URL列表","name":"html","type":"array"},{"desc":"要预加载的扩展模块列表","name":"ext","type":"array"},{"desc":"资源版本号","name":"vers","type":"string"}],"name":"start","example":[[{"desc":"您需要定义好需要加载的各项数组，然后在&nbsp;&lt;body&gt;&nbsp;标签的&nbsp;onload&nbsp;事件中添加&nbsp;start&nbsp;方法","code":" &lt;body onload=\"$jsmvc$.run.start(css, js, html, ext, new Date().getTime());\"&gt;&lt;/body&gt;"}]]},{"desc":"异步加载JS。通常情况下，无需使用该方法。JS&nbsp;应在调用&nbsp;start&nbsp;时进行加载","param":[{"desc":"JS地址。已经加载过了直接返回成功","name":"url","type":"string"},{"desc":"加载完毕回调方法，回调方法包含2个参数：<br>1.加载状态&nbsp;boolean<br>2.JS命名空间&nbsp;{&nbsp;package:包,&nbsp;className:类名&nbsp;}","name":"cb","type":"function"}],"name":"includeJS","example":[[{"desc":"","code":" $jsmvc$.run.includeJS(\"http://example.com/x.js\", function(s, o){\n      if(s){\n          if(o){\n              console.log(o.className);\n              console.log(o.package[o.className]);\n          }\n      }else{\n          console.log(\"error\");\n      }\n });"}]]},{"desc":"异步加载CSS。CSS文件不能是空内容。通常情况下，无需使用该方法。CSS&nbsp;应在调用&nbsp;start&nbsp;时进行加载","param":[{"desc":"CSS地址","name":"url","type":"string"},{"desc":"加载完毕回调方法，回调方法包含1个&nbsp;boolean&nbsp;参数，表示是否加载成功","name":"cb","type":"function"}],"name":"includeCSS","example":[[{"desc":"","code":" $jsmvc$.run.includeCSS(\"http://example.com/x.css\", function(s){\n      if(s){\n          console.log(\"ok\");\n      }else{\n          console.log(\"error\");\n      }\n });"}]]},{"desc":"异步加载HTML。通常情况下，无需使用该方法。HTML&nbsp;应在调用&nbsp;start&nbsp;时进行加载","param":[{"desc":"HTML地址","name":"url","type":"string"},{"desc":"加载完毕回调方法，回调方法包含1个&nbsp;boolean&nbsp;参数，表示是否加载成功","name":"cb","type":"function"}],"name":"includeHTML","example":[[{"desc":"","code":" $jsmvc$.run.includeHTML(\"http://example.com/x.html\", function(s){\n      if(s){\n          console.log(\"ok\");\n      }else{\n          console.log(\"error\");\n      }\n });"}]]},{"desc":"异步加载扩展模块。对于在调用&nbsp;start&nbsp;已预加载的扩展，无需再调用该方法","param":[{"desc":"要加载的扩展包","name":"ext","type":"string"},{"desc":"加载扩展回调<br>回调函数的第一个参数为加载状态：0=成功&nbsp;1=加载过程&nbsp;2=加载失败&nbsp;3=加载超时&nbsp;4=出现错误<br>回调函数的第二个参数为状态数据：根据不同的状态，值不同<br>&nbsp;&nbsp;&nbsp;&nbsp;当第一个参数为&nbsp;0&nbsp;时，第二个参数为空<br>&nbsp;&nbsp;&nbsp;&nbsp;当第一个参数为&nbsp;1&nbsp;时，第二个参数为&nbsp;object，加载进度对象&nbsp;{&nbsp;total:总进度，0为开始加载,&nbsp;progress:当前进度&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;当第一个参数为&nbsp;2&nbsp;时，第二个参数为&nbsp;string，加载失败的资源URL<br>&nbsp;&nbsp;&nbsp;&nbsp;当第一个参数为&nbsp;3&nbsp;时，第二个参数为&nbsp;object，超时仍为完成加载的url资源object集合，k/v&nbsp;均为URL<br>&nbsp;&nbsp;&nbsp;&nbsp;当第一个参数为&nbsp;4&nbsp;时，第二个参数为&nbsp;string，错误消息","name":"cb","type":"function"}],"name":"includeExt","example":[[{"desc":"","code":" $jsmvc$.run.includeExt(\"http://example.com/ext/package.js\", function(s, o){\n      switch (s){\n          case 0:\n              console.log(\"ok\");\n          break;\n          case 1:\n              if(o.total){\n                  console.log(\"total:\"+o.total, \"progress:\"+o.progress);\n              }else{\n                  console.log(\"Start load ing...\");\n              }\n          break;\n          case 2:\n              console.log(\"Load fail # URL:\"+o);\n          break;\n          case 3:\n              console.log(\"Load timeout!\", JSON.stringify(o));\n          break;\n          case 4:\n              console.log(\"Load error # msg:\",+o);\n          break;\n      }\n });"}]]},{"desc":"添加&nbsp;Facade&nbsp;类来启动程序进行初始化操作，该方法只允许被调用一次。参考&nbsp;$jsmvc$.core.FacadeAbs&nbsp;文档","param":[{"desc":"一个继承&nbsp;$jsmvc$.core.FacadeAbs&nbsp;的自定义类","name":"facade","type":"function"}],"name":"addFacade","example":[[{"desc":"","code":" $jsmvc$.run.addFacade(function(){\n      //这里可以定义一些全局的属性、\n      this.x = \"示例\";//其它位置可通过 $jsmvc$.facade.x 来访问 x 属性\n      this.startup = function(){\n          //启动业务逻辑，您可以在这里初始化注册必须的模块、\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\").showPage();//注册 HelloWorld 模块并显示\n      }\n });"}]]}]},"example":[[{"desc":"1：在&nbsp;index.html&nbsp;文件的&nbsp;head&nbsp;标签中导入&nbsp;run&nbsp;脚本文件。","code":" &lt;script type=\"text/javascript\" src=\"$jsmvc$/run.js\" charset=\"utf-8\"&gt;&lt;/script&gt;"},{"desc":"2：在&nbsp;index.html&nbsp;文件的&nbsp;&nbsp;&lt;head&gt;&nbsp;标签中创建一个新的&nbsp;&nbsp;&lt;script&gt;&nbsp;标签，并定义要加载的&nbsp;CSS,HTML,JS&nbsp;数组。","code":" //您项目的CSS文件列表\n var css = [\n     \"css/css.css\"\n ];\n\n //您项目的JS文件列表，注意JS数组是个二维数组，用于区分同步/异步加载\n //加载顺序参考：[[a,b,c],[d,e,f]]。并行加载a、b、c完成后再并行加载 d、e、f，依此类推\n var js = [[\n       //加载框架超类\n      \"$jsmvc$/core/FacadeAbs.js\",\n      \"$jsmvc$/core/PageAbs.js\",\n      \"$jsmvc$/core/ModelAbs.js\",\n      \"$jsmvc$/core/ControAbs.js\",\n       //加载您项目js模块文件\n      \"js/contro/ChangeView.js\",\n      \"js/model/vo/GreetVO.js\",\n      \"js/model/Hi.js\",\n      \"js/page/HelloWorld.js\",\n      \"js/Facade.js\"\n ]];\n\n //您项目的HTML模版文件列表\n var html = [\n     \"html/helloWorld.html\"\n ];\n\n //需要预加载的扩展包，扩展不是必须的，参考 jsmvc 扩展相关文档说明\n var ext = [\n     \"ext/example/package.js\"\n ];"},{"desc":"3：在&nbsp;index.html&nbsp;的&nbsp;body&nbsp;标签&nbsp;onload&nbsp;事件中执行&nbsp;$jsmvc$.run.start&nbsp;方法。","code":" &lt;body onload=\"$jsmvc$.run.start(css, js, html, ext, new Date().getTime());\"&gt;&lt;/body&gt;"}]],"notice":[]},"$jsmvc$.core.ControAbs":{"statement":"class","desc":"控制器超类，负责协调模块之间的业务逻辑，控制器是无状态的，由广播触发执行后即销毁。所有通过&nbsp;$jsmvc$.facade.reqContro&nbsp;注册的模块都会自动继承该超类<br>通过下面的例子说明如何利用控制器来降低模块之间的耦合和复杂度","exte":"","evt":{"pro":[],"pub":[{"ret":{"desc":"提供给子类保护访问的属性或函数集合","type":"object"},"desc":"当控制器被执行时触发，您可以在子类重写该事件","param":[{"desc":"父类链中需要提供保护访问的属性或函数集合","name":"parent","type":"object"}],"name":"onCreate","example":[[{"desc":"创建一个名称为&nbsp;ExampleA&nbsp;的控制，并把私有函数通过&nbsp;onCreate&nbsp;传递给子类","code":" js.contro.ExampleA = function (evtName, data) {\n      //定义一个可以被子类所访问的私有函数\n      var test = function(){\n          return \"my is ExampleA\";\n      }\n      //控制器被执行时的事件\n      this.onCreate = function(parent){\n          //提供给子类访问的私有函数集合\n          return {test:test}\n      }\n };"},{"desc":"创建一个名称为&nbsp;ExampleB&nbsp;的控制器并继承&nbsp;ExampleA","code":" js.contro.ExampleB = function (evtName, data) {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //控制器被执行时的事件\n      this.onCreate = function(parent){\n          //继承父类的私有函数\n          protected = parent;\n          //调用父类的私有函数并打印返回值到控制台\n          console.log(protected.test());\n      }\n }.extends(\"js.contro.ExampleA\");//继承 ExampleA"}]]}]},"attr":{"sta":[],"pro":[],"pub":[{"desc":"控制器类名全路径字符串，如：a.b.c","name":"className","type":"string"},{"desc":"公共函数集合，当您在子类需要重写父类公共函数时，可以通过&nbsp;supers&nbsp;集合来调用父类的函数","name":"supers","type":"object"}]},"func":{"sta":[],"pro":[],"pub":[]},"example":[[{"desc":"需求：有&nbsp;2&nbsp;个&nbsp;page&nbsp;和&nbsp;2&nbsp;个&nbsp;model&nbsp;。2&nbsp;个&nbsp;page&nbsp;业务相同，当用户点击页面按钮时，读取一个&nbsp;model&nbsp;的数据然后保存到另一个&nbsp;model&nbsp;中<br><br>创建一个名称为&nbsp;modelA&nbsp;的&nbsp;model&nbsp;模块，并对外提供一个读取数据的函数","code":" js.model.modelA = function () {\n      //创建一个公共函数来对外提供数据获取，返回数据 1\n      this.getV = function(){\n          return 1;\n      }\n };"},{"desc":"创建一个名称为&nbsp;modelB&nbsp;的&nbsp;model&nbsp;模块，并对外提供一个写入数据的函数","code":" js.model.modelB = function () {\n      var data = 0;\n      //创建一个公共函数，用于保存数据\n      this.setV = function(v){\n          data += v;\n      }\n };"},{"desc":"创建&nbsp;2&nbsp;个&nbsp;page&nbsp;模块，名称为&nbsp;pageA&nbsp;和&nbsp;pageB<br>他们都有相同的逻辑，当用户点击页面按钮时，读取&nbsp;modelA&nbsp;的&nbsp;getV&nbsp;函数返回值加&nbsp;100&nbsp;然后调用&nbsp;modelB&nbsp;的&nbsp;setV&nbsp;来保存数据","code":" js.page.pageA = function () {\n      this.onCreate = function(parent){\n          parent.setStage(document.body);\n          var btn = parent.setDisplay($(\"<div>click btn</div>\"));\n          btn.click(function(){\n              //当用户点击按钮时，获取 modelA 的值加 100 然后保存到 modelB 中\n              var n = $jsmvc$.facade.reqModel(\"js.model.modelA\").getV();\n              $jsmvc$.facade.reqModel(\"js.model.modelB\").setV(n+100);\n          })\n      }\n };"},{"desc":"","code":" js.page.pageB = function () {\n      this.onCreate = function(parent){\n          parent.setStage(document.body);\n          var btn = parent.setDisplay($(\"<div>click btn</div>\"));\n          btn.click(function(){\n              //当用户点击按钮时，获取 modelA 的值加 100 然后保存到 modelB 中\n              var n = $jsmvc$.facade.reqModel(\"js.model.modelA\").getV();\n              $jsmvc$.facade.reqModel(\"js.model.modelB\").setV(n+100);\n          })\n      }\n };"},{"desc":"假如当用户点击按钮后的逻辑发生变化时，比如把增加的值改为&nbsp;200&nbsp;时或者&nbsp;modelA&nbsp;的函数名称发生改变时，那么您需要修改&nbsp;pageA&nbsp;和&nbsp;pageB&nbsp;中的逻辑<br>实际上，您可以通过一个控制器来处理用户点击后的业务，参考如下：<br><br>新建一个控制器&nbsp;controA，并实现&nbsp;pageA&nbsp;和&nbsp;pageB&nbsp;中点击事件后需要处理的业务","code":" js.contro.controA = function (evtName, data) {\n      var n = $jsmvc$.facade.reqModel(\"js.model.modelA\").getV();\n      $jsmvc$.facade.reqModel(\"js.model.modelB\").setV(n+100);\n };"},{"desc":"在框架启动时把控制器注册起来","code":" $jsmvc$.run.addFacade(function(){\n      //定义一个通知常量\n      this.NOTICE_EXAMPLE = \"notice_example\";\n      this.startup = function(){\n          //注册控制器\n          $jsmvc$.facade.reqContro(\"js.contro.controA\", this.NOTICE_EXAMPLE);\n      }\n });"},{"desc":"之后，pageA&nbsp;和&nbsp;pageB&nbsp;的点击事件处理中，只要发送一个&nbsp;NOTICE_EXAMPLE&nbsp;通知即可<br>以后无论&nbsp;modelA&nbsp;和&nbsp;modelB&nbsp;的接口或点击后的控制业务如何变化，只要修改&nbsp;controA&nbsp;控制器即可","code":" js.page.pageA = function () {\n      this.onCreate = function(parent){\n          parent.setStage(document.body);\n          var btn = parent.setDisplay($(\"<div>click btn</div>\"));\n          btn.click(function(){\n              //发送一个通知来让 controA 处理相关业务逻辑\n              parent.sendBroadcast($jsmvc$.facade.NOTICE_EXAMPLE);\n          })\n      }\n };"},{"desc":"","code":" js.page.pageB = function () {\n      this.onCreate = function(parent){\n          parent.setStage(document.body);\n          var btn = parent.setDisplay($(\"<div>click btn</div>\"));\n          btn.click(function(){\n              //发送一个通知来让 controA 处理相关业务逻辑\n              parent.sendBroadcast($jsmvc$.facade.NOTICE_EXAMPLE);\n          })\n      }\n };"},{"desc":"在实际开发项目中，业务和模块中的耦合度比例子中的情况要复杂得多，您需要根据实际情况确定如何应用控制器来减少模块的耦合和复杂度。"}]],"notice":[]},"$jsmvc$.core.PageAbs":{"statement":"class","desc":"Page&nbsp;模块超类，负责页面交互和显示，注册到框架上的&nbsp;page&nbsp;均为单例。所有通过&nbsp;$jsmvc$.facade.reqPage&nbsp;注册的模块都会自动继承该超类","exte":"","evt":{"pro":[],"pub":[{"ret":{"desc":"提供给子类保护访问的属性或函数集合","type":"object"},"desc":"当模块被创建时触发，不可显式调用。模块的初始化操作应放在该事件中进行处理，您可以在子类重写该事件","param":[{"desc":"父类链中需要提供保护访问的属性或函数集合","name":"parent","type":"object"}],"name":"onCreate","example":[[{"desc":"创建一个名称为&nbsp;ExampleA&nbsp;的&nbsp;page&nbsp;类，并把私有函数通过&nbsp;onCreate&nbsp;传递给子类","code":" js.page.ExampleA = function () {\n      //定义一个可以被子类所访问的私有函数\n      var test = function(){\n          return \"my is ExampleA\";\n      }\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //模块的初始化操作，例如舞台设置、HTML 模版设置等\n          //...\n          //提供给子类访问的私有函数集合\n          return {test:test}\n      }\n };"},{"desc":"创建一个名称为&nbsp;ExampleB&nbsp;的&nbsp;page&nbsp;类并继承&nbsp;ExampleA","code":" js.page.ExampleB = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //继承父类的私有函数\n          protected = parent;\n          //模块的初始化操作，例如舞台设置、HTML 模版设置等\n          //...\n          //调用父类的私有函数并打印返回值到控制台\n          console.log(protected.test());\n      }\n }.extends(\"js.page.ExampleA\");//继承 ExampleA"}]]},{"desc":"模块销毁。通过&nbsp;$jsmvc$.facade.delPage&nbsp;删除模块时触发，可显式调用","param":[],"name":"onDestroy","example":[[{"desc":"创建一个名称为&nbsp;HelloWorld&nbsp;的&nbsp;page&nbsp;类","code":" js.page.HelloWorld = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n      }\n      //重写 onDestroy 事件，如果没有需要自定义的销毁业务，不必重新该事件\n      this.onDestroy = function(){\n          //模块销毁前的业务处理\n          console.log(\"模块即将删除！~\");\n          //重写 onDestroy 时必须显式调用父类的 onDestroy\n          this.supers.onDestroy();\n          //模块销毁后的业务处理\n          console.log(\"模块被删除了！~\");\n      }\n };"},{"desc":"在框架启动时注册&nbsp;HelloWorld&nbsp;模块","code":" $jsmvc$.run.addFacade(function(){\n      this.startup = function(){\n          //注册 HelloWorld 模块\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\");\n      }\n });"},{"desc":"在其它任意模块中，通过调用&nbsp;$jsmvc$.facade.delPage&nbsp;来删除该模块","code":"     //删除 page 模块\n     $jsmvc$.facade.delPage(\"js.page.HelloWorld\");"},{"desc":"或者直接调用&nbsp;onDestroy&nbsp;来删除","code":"     //删除 page 模块\n     var p = $jsmvc$.facade.reqPage(\"js.page.HelloWorld\");\n     p.onDestroy();"}]]}]},"attr":{"sta":[],"pro":[],"pub":[{"desc":"模块类名全路径字符串，如：a.b.c","name":"className","type":"string"},{"desc":"公共函数集合，当您在子类需要重写父类公共函数时，可以通过&nbsp;supers&nbsp;集合来调用父类的函数","name":"supers","type":"object"}]},"func":{"sta":[],"pro":[{"ret":{"desc":"舞台对象","type":"element|object"},"desc":"设置舞台。当调用&nbsp;showPage&nbsp;时当前页面显示的位置，例如&nbsp;body&nbsp;或者其它的任意可用于添加显示元素的标签<br>setStage&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"一个HTML节点元素或者JQ对象","name":"element","type":"element|object"}],"name":"setStage","example":[[{"desc":"例子1：在模块初始化时进行舞台设置","code":" js.page.HelloWorld = function () {\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //设置 body 为该模块的舞台，即模显示的内容放置在 body 中\n          parent.setStage(document.body);\n      }\n };"},{"desc":"例子2：在需要的时候进行舞台设置","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      //自定义私有函数\n      var test = function(element){\n          //您自己的逻辑\n          //...\n          //调用父类函数来执行添加舞台操作\n          protected.setStage(element);\n      }\n };"}]]},{"ret":{"desc":"舞台对象引用","type":"element"},"desc":"获取舞台。&nbsp;getStage&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[],"name":"getStage","example":[[{"desc":"模块创建时添加一个舞台对象，之后在一个私有函数中进行获取","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //添加舞台引用\n          protected.setStage(document.body);\n      }\n      //自定义私有函数\n      var test = function(){\n          //取得舞台\n          var s = protected.getStage();\n          //您的业务逻辑\n          //...\n      }\n };"}]]},{"ret":{"desc":"成功或者失败","type":"boolean"},"desc":"删除舞台同时移出已添加的显示对象。&nbsp;delStage&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[],"name":"delStage","example":[[{"desc":"模块创建时添加一个舞台对象，之后在一个私有函数中进行删除","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //添加舞台引用\n          protected.setStage(document.body);\n      }\n      //自定义私有函数\n      var test = function(){\n          //您的业务逻辑\n          //...\n          //移除舞台\n          protected.delStage();\n      }\n };"}]]},{"ret":{"desc":"添加后的显示对象","type":"element|JQuery"},"desc":"设置显示对象，如果已经存在显示对象，那么新的显示对象会替换掉旧的，并在原位置显示<br>setDisplay&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"可以是一个element节点、JQ对象或者是HTML模版路径","name":"element","type":"string|element|JQuery"}],"name":"setDisplay","example":[[{"desc":"例子1：根据&nbsp;HTML&nbsp;模版路径添加显示对象","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          protected.setDisplay(\"html.helloWorld\");\n      }\n };"},{"desc":"例子2：把一个&nbsp;HTML&nbsp;节点元素作为显示对象添加","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //创建一个 HTML 节点并添加到模块上\n          var e = document.createElement(\"DIV\");\n          e.innerHTML = \"my is div..\";\n          protected.setDisplay(e);\n      }\n };"},{"desc":"例子3：把一个&nbsp;JQ&nbsp;对象作为显示对象添加","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //创建一个 JQ 对象并添加到模块上，JQ 对象请参考 JQuery 的文档\n          //您需要确保已经加载了 JQuery 插件，参考 run 中加载资源的相关说明\n          protected.setDisplay($(\"<div>my is jq object..</div>\"));\n      }\n };"}]]},{"ret":{"desc":"HTML&nbsp;节点元素或者是&nbsp;JQ&nbsp;对象","type":"element|JQuery"},"desc":"获取已经添加的显示对象。&nbsp;getDisplay&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[],"name":"getDisplay","example":[[{"desc":"在模块初始化时添加一个模版作为显示对象，并在一个私有函数中进行获取","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          protected.setDisplay(\"html.helloWorld\");\n      }\n      //自定义私有函数\n      var test = function(){\n          //获取已经添加的显示对象\n          var e = protected.getDisplay();\n          //您可以对 e 的内容进行业务处理\n          //...\n      }\n };"}]]},{"ret":{"desc":"成功或者失败","type":"boolean"},"desc":"删除已经添加的显示对象。&nbsp;delDisplay&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[],"name":"delDisplay","example":[[{"desc":"在模块初始化时添加一个模版作为显示对象，并在一个私有函数中进行删除","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          protected.setDisplay(\"html.helloWorld\");\n      }\n      //自定义私有函数\n      var test = function(){\n          //删除已经添加的显示对象\n          protected.delDisplay();\n      }\n };"}]]},{"desc":"当page重写showPage函数但又不需要调用父函数supers.showPage的情况下，需要调用本函数来记录页面访问记录，否则无法实现页面前进后退的功能。","param":[{"desc":"任意长度的参数，调用showPage时会原样返回","name":"arguments","type":"array"}],"name":"showHistory","example":[[{"desc":"重写showPage中调用showHistory来记录页面，如果调用了supers.showPage就无需调用showHistory","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      this.showPage = function(){\n          //this.supers.showPage(); 使用自己的显示方式，不调用父类的showPage\n          protected.showHistory();\n          //您的页面显示业务\n      }\n };"}]]},{"desc":"显示上一个页面，如果没有时，不会有任何变化。","param":[],"name":"showPrevPage","example":[[{"desc":"点击某个按钮后，返回到上一个页面，类似点击浏览器上的后退按钮","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      this.showPage = function(){\n          this.supers.showPage();\n          //backbtn为您页面上的某个按钮\n          backbtn.on(\"click\",function(){\n              protected.showPrevPage();\n          });\n      }\n };"}]]},{"desc":"显示下一个页面，如果没有时，不会有任何变化。","param":[],"name":"showNextPage","example":[[{"desc":"点击某个按钮后，前进到下一个页面，类似点击浏览器上的前进按钮。通常，只有在调用了后退到上一页时，才可能前进到下一页，可参考浏览器的前进后退按钮。","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      this.showPage = function(){\n          this.supers.showPage();\n          //nextbtn为您页面上的某个按钮\n          nextbtn.on(\"click\",function(){\n              protected.showNextPage();\n          });\n      }\n };"}]]},{"ret":{"desc":"模版字符串","type":"string"},"desc":"获取&nbsp;HTML&nbsp;模版。getTemplate&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"模版路径，目录用&nbsp;.&nbsp;符合隔开，并且不要有&nbsp;.html&nbsp;后缀","name":"templateName","type":"string"}],"name":"getTemplate","example":[[{"desc":"获取&nbsp;html&nbsp;目录下的&nbsp;helloWorld.html&nbsp;模版字符串","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          var tpl = protected.getTemplate(\"html.helloWorld\");\n          //在控制台打印模版内容\n          console.log(tpl);\n          //您可以创建 tpl 为节点元素或者 JQ 对象，例如：$(tpl) 来获得一个 JQ 对象\n          //...\n      }\n };"}]]},{"ret":{"desc":"事件ID","type":"number"},"desc":"订阅广播。attachNotice&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"广播名称，可以是一个字符串或者常量","name":"evtName","type":"string"},{"desc":"&nbsp;回调方法，第一个参数为事件名，第二个参数为事件带回来的数据对象","name":"cb","type":"function"}],"name":"attachNotice","example":[[{"desc":"关注&nbsp;TEST&nbsp;广播，并在控制台打印广播数据","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //定义一个用来处理广播消息的私有函数，该函数有2个参数：事件名和事件数据\n      var test = function(evtName, evtData){\n          console.log(evtData);\n      }\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          protected.attachNotice(\"TEST\", test);\n      }\n };"},{"desc":"在任意模块中通过&nbsp;facade&nbsp;调用&nbsp;sendBroadcast&nbsp;函数来发送该广播","code":"     //发送一个名为 TEST 的广播并附带一个字符串作为数据\n     $jsmvc$.facade.sendBroadcast(\"TEST\",\"hello!~\");"}]]},{"ret":{"desc":"成功或者失败","type":"boolean"},"desc":"取消广播订阅。removeNotice&nbsp;是一个保护函数，无法通过&nbsp;this&nbsp;或者外部访问，请参考例子中的方式访问","param":[{"desc":"要移除的事件名","name":"evtName","type":"string"},{"desc":"事件ID，添加事件时获得","name":"evtId","type":"number"}],"name":"removeNotice","example":[[{"desc":"初始化时关注&nbsp;TEST&nbsp;广播，收到广播之后删除它，确保只关注一次","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //定义一个变量来保存广播ID\n      var evtId;\n      //定义一个用来处理广播消息的私有函数，该函数有2个参数：事件名和事件数据\n      var test = function(evtName, evtData){\n          //在控制台打印广播数据\n          console.log(evtData);\n          //然后删除该广播\n          protected.removeNotice(\"TEST\", evtId);\n      }\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n          //关注广播并保存广播ID\n          evtId = protected.attachNotice(\"TEST\", test);\n      }\n };"}]]},{"ret":{"desc":"true是表示可以后退","type":"boolean"},"desc":"判断页面是否可以后退","param":[],"name":"prevPageActive","example":[[{"desc":"在showPage中检测页面是否可以后退，以此来确定是否要显示后退按钮到top栏","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      this.showPage = function(){\n          this.supers.showPage();\n          if(protected.prevPageActive()){\n              //显示后退按钮\n          }else{\n              //隐藏后退按钮\n          }\n      }\n };"}]]},{"ret":{"desc":"true是表示可以前进","type":"boolean"},"desc":"判断页面是否可以前进","param":[],"name":"nextPageActive","example":[[{"desc":"在showPage中检测页面是否可以前进，以此来确定是否要显示前进按钮到top栏","code":" js.page.HelloWorld = function () {\n      //父类保护函数集合，调用父类保护函数时需要通过该引用来访问\n      var protected;\n      //模块被创建时的事件\n      this.onCreate = function(parent){\n          //保存父类保护函数集合到一个私有变量中\n          protected = parent;\n      }\n      this.showPage = function(){\n          this.supers.showPage();\n          if(protected.nextPageActive()){\n              //显示前进按钮\n          }else{\n              //隐藏前进按钮\n          }\n      }\n };"}]]}],"pub":[{"ret":{"desc":"成功或者失败","type":"boolean"},"desc":"把显示对象添加到舞台上（舞台原有的所有元素会被移除），调用该函数前确保已经添加了舞台和显示对象","param":[{"desc":"您重写showPage时，如果有参数，那么在调用supers.showPage时需要把参数往上传递","name":"arguments","type":"array"}],"name":"showPage","example":[[{"desc":"创建一个名称为&nbsp;HelloWorld&nbsp;的&nbsp;page&nbsp;类","code":" js.page.HelloWorld = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          //设置 body 为该模块的舞台，即模显示的内容放置在 body 中\n          parent.setStage(document.body);\n          //设置 HTML 模版，需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          parent.setDisplay(\"html.helloWorld\");\n      }\n };"},{"desc":"在框架启动时注册&nbsp;HelloWorld&nbsp;模块，并调用&nbsp;showPage&nbsp;函数来显示","code":" $jsmvc$.run.addFacade(function(){\n      this.startup = function(){\n          //注册 HelloWorld 模块并调用 showPage 方法显示\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\").showPage();\n      }\n });"},{"desc":"或者在其它任意模块中，通过&nbsp;$jsmvc$.facade.reqPage&nbsp;来获取到该模块，并调用&nbsp;showPage","code":"     //取得 page 模块\n     var p = $jsmvc$.facade.reqPage(\"js.page.HelloWorld\");\n     //调用模块的公共方法\n     p.showPage();"}]]},{"ret":{"desc":"活跃/不活跃","type":"boolean"},"desc":"检查当前页面处于显示状态","param":[{"desc":"是否匹配当前的舞台，当true时，显示对象必须是添加至当前的舞台上，默认false","name":"matchStage","type":"boolean"}],"name":"isActive","example":[[{"desc":"在模块初始化时添加一个显示对象，并通过&nbsp;isActive&nbsp;来判断是否已经被添加到舞台","code":" js.page.HelloWorld = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          //设置 body 为该模块的舞台，即模显示的内容放置在 body 中\n          parent.setStage(document.body);\n          //设置 HTML 模版，需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          parent.setDisplay(\"html.helloWorld\");\n          //控制台必定打印 false ，因为还未调用 showPage 方法\n          console.log(this.isActive());\n      }\n };"},{"desc":"","code":" $jsmvc$.run.addFacade(function(){\n      this.startup = function(){\n          //注册 page 模块\n          var p = $jsmvc$.facade.reqPage(\"js.page.HelloWorld\");\n          //调用模块显示\n          p.showPage();\n          //控制台必定打印 true，因为已经调用了 showPage 方法\n          console.log(p.isActive());\n      }\n });"}]]}]},"example":[[{"desc":"在&nbsp;js/page&nbsp;目录中新建一个&nbsp;HelloWorld&nbsp;类，并在&nbsp;html&nbsp;目录中添加一个&nbsp;helloWorld.html&nbsp;模版，内容可以是任意&nbsp;html&nbsp;标签<br>html&nbsp;模版文件不需要有&nbsp;&lt;html&gt;&nbsp;&lt;head&gt;&nbsp;&lt;body&gt;&nbsp;这样的标签，只需要具体的内容，例如&nbsp;&lt;div&gt;my&nbsp;is&nbsp;tpl...&lt;/div&gt;&nbsp;即可","code":" js.page.HelloWorld = function () {\n      //模版被创建时的事件\n      this.onCreate = function(parent){\n          //设置 body 为该模块的舞台，即模显示的内容放置在 body 中\n          parent.setStage(document.body);\n          //设置 HTML 模版，需要确保 html 目录下有 helloWorld.html 模版文件（名字区分大小写）\n          //模版路径用 . 符号隔开，并且不要有 .html 的后缀\n          parent.setDisplay(\"html.helloWorld\");\n      }\n };"},{"desc":"在框架启动时注册&nbsp;HelloWorld&nbsp;模块并且显示到浏览器上。在&nbsp;facade&nbsp;的&nbsp;startup&nbsp;方法中进行模块注册","code":" $jsmvc$.run.addFacade(function(){\n      this.startup = function(){\n          //注册 HelloWorld 模块并调用 showPage 方法显示\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\").showPage();\n      }\n });"}]],"notice":[]},"$jsmvc$.core.FacadeAbs":{"statement":"class","desc":"Facade&nbsp;超类，负责启动框架、初始化操作和各个模块的注册。通过&nbsp;$jsmvc$.run.addFacade&nbsp;添加的类会自动继承该超类","exte":"","evt":{"pro":[],"pub":[]},"attr":{"sta":[],"pro":[],"pub":[{"desc":"公共函数集合，当您在子类需要重写父类公共函数时，可以通过&nbsp;supers&nbsp;集合来调用父类的函数","name":"supers","type":"object"}]},"func":{"sta":[],"pro":[],"pub":[{"ret":{"desc":"派发次数","type":"number"},"desc":"发布广播","param":[{"desc":"要派发的事件名","name":"evtName","type":"string"},{"desc":"派发的数据对象","name":"evtData","type":"object"}],"name":"sendBroadcast","example":[[{"desc":"发送一个名称为&nbsp;TEST&nbsp;的广播，并附带一个&nbsp;object&nbsp;数据对象","code":"     //在任何模块中，都可以调用 sendBroadcast 来发送广播\n     $jsmvc$.facade.sendBroadcast(\"TEST\",{v:123});"},{"desc":"订阅方式1：在&nbsp;page&nbsp;模块中订阅该广播，参考&nbsp;$jsmvc$.core.PageAbs","code":" js.page.Example = function () {\n     this.onCreate = function(parent){\n          parent.attachNotice(\"TEST\",function(evtName,evtData){\n              console.log(evtData.v);//控制台打印收到的广播数据\n          });\n     }\n }"},{"desc":"订阅方式2：定义一个控制器来处理&nbsp;TEST&nbsp;消息，参考&nbsp;$jsmvc$.core.ControAbs","code":" //在 js/contro 目录下新建一个名称为 Example 的控制器类\n js.contro.Example = function (evtName, evtData) {\n      console.log(evtData.v);//控制台打印收到的广播数据\n }\n //在任何模块中，通过调用 reqContro 把控制器注册到 TEST 消息\n //通常在 Facade 的 startup 方法中把需要注册的控制器在框架启动时就注册起来\n $jsmvc$.facade.reqContro(\"js.contro.Example\", \"TEST\");"}]]},{"ret":{"desc":"Model&nbsp;类单例，多次注册始终返回同一实例","type":"object"},"desc":"注册&nbsp;MODEL&nbsp;模块并返回实例（单例）","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"}],"name":"reqModel","example":[[{"desc":"在&nbsp;js/model&nbsp;目录下新建一个名称为&nbsp;Example&nbsp;的&nbsp;Model&nbsp;类，参考&nbsp;$jsmvc$.core.ModelAbs","code":" js.model.Example = function () {\n     this.onCreate = function(parent){\n          //初始化模块操作\n     }\n     //创建一个 Model 的公共方法\n     this.test = function(){\n          return \"test\";\n     }\n }"},{"desc":"注册&nbsp;Example&nbsp;类到框架。根据实际情况，可以在&nbsp;Facade&nbsp;的&nbsp;startup&nbsp;方法中注册或者是使用到的时候注册","code":"     var example = $jsmvc$.facade.reqModel(\"js.model.Example\");\n     console.log(example.test());//控制台打印 Example 模块中 test 方法的返回值"}]]},{"ret":{"desc":"Page&nbsp;类单例，多次注册始终返回同一实例","type":"object"},"desc":"注册&nbsp;PAGE&nbsp;模块并返回实例（单例）","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"}],"name":"reqPage","example":[[{"desc":"在&nbsp;js/page&nbsp;目录下新建一个名称为&nbsp;Example&nbsp;的&nbsp;Page&nbsp;类，参考&nbsp;$jsmvc$.core.PageAbs","code":" js.page.Example = function () {\n     this.onCreate = function(parent){\n          //设置 body 为该模块的舞台，即模显示的内容放置在 body 中\n          parent.setStage(document.body);\n          //设置 HTML 模版，需要确保 html 目录下有 Example.html 模版文件（名字区分大小写）\n          parent.setDisplay(\"html.Example\");\n     }\n }"},{"desc":"注册&nbsp;Example&nbsp;类到框架。根据实际情况，可以在&nbsp;Facade&nbsp;的&nbsp;startup&nbsp;方法中注册或者是使用到的时候注册","code":"     var example = $jsmvc$.facade.reqPage(\"js.page.Example\");\n     example.showPage();//显示 Page 模块到 body 中，showPage 是 PageAbs 超类中的方法。"}]]},{"desc":"注册&nbsp;CONTRO&nbsp;模块并进行事件监听","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"},{"desc":"事件名称","name":"evtName","type":"string"}],"name":"reqContro","example":[[{"desc":"在&nbsp;js/contro&nbsp;目录下新建一个名称为&nbsp;Example&nbsp;的控制器类，参考&nbsp;$jsmvc$.core.ControAbs","code":" js.contro.Example = function (evtName,evtData) {\n     this.onCreate = function(parent){\n          //控制器业务处理\n          console.log(\"控制器被执行了,evtData:\"+evtData.v);\n     }\n }"},{"desc":"注册&nbsp;Example&nbsp;控制器到框架。根据实际情况，可以在&nbsp;Facade&nbsp;的&nbsp;startup&nbsp;方法中注册或者是使用到的时候注册","code":"     //注册一个关注消息名称为 TEST 的控制器\n     $jsmvc$.facade.reqContro(\"js.contro.Example\", \"TEST\");"},{"desc":"发送一个通知来执行刚才注册的控制器，并附带一个&nbsp;object&nbsp;给控制器","code":"     //在任何模块中，都可以调用 sendBroadcast 来发送广播\n     $jsmvc$.facade.sendBroadcast(\"TEST\",{v:123});"}]]},{"desc":"移除&nbsp;MODEL&nbsp;模块，调用该方法会触发模块的&nbsp;onDestroy&nbsp;事件","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"}],"name":"delModel","example":[[{"desc":"","code":"     //把名称为 Example 的 model 模块从框架中移除\n     $jsmvc$.facade.delModel(\"js.model.Example\");"}]]},{"desc":"移除&nbsp;PAGE&nbsp;模块，调用该方法会触发模块的&nbsp;onDestroy&nbsp;事件","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"}],"name":"delPage","example":[[{"desc":"","code":"     //把名称为 Example 的 page 模块从框架中移除\n     $jsmvc$.facade.delPage(\"js.page.Example\");"}]]},{"desc":"移除控制器并删除对应事件侦听","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"}],"name":"delContro","example":[[{"desc":"","code":"     //把名称为 Example 的控制从框架中移除\n     $jsmvc$.facade.delContro(\"js.contro.Example\");"}]]},{"ret":{"desc":"类的对象","type":"object"},"desc":"新建一个实例。该函数创建的类并不会注册到框架上，而是一个普通的类实例，如同&nbsp;new&nbsp;方式实例化的对象一样<br>与&nbsp;new&nbsp;的区别在于使用&nbsp;newInstance&nbsp;方式实例化的类可以采用框架的继承方式，详细可参考&nbsp;jsmvc&nbsp;继承相关文档","param":[{"desc":"类命全路径，如：a.b.c","name":"className","type":"string"},{"desc":"[&nbsp;可选&nbsp;]&nbsp;指定超类的类型，值为：page、model、contro。无参数时，不继承任何超类","name":"type","type":"string"}],"name":"newInstance","example":[[{"desc":"在&nbsp;js/custom&nbsp;目录下新建一个名称为&nbsp;ExampleA&nbsp;的普通类","code":" js.custom.ExampleA = function () {\n     //定义一个私有方法\n     var me = function(){\n          return \"我是类A的私有方法\";\n     }\n     //定义一个公共方法\n     this.a = function(){\n          return \"我是类A的公共方法\";\n     }\n     this.onCreate = function(parent){\n          //把私有方法提供给子类作为保护方法访问\n          return {me:me};\n     }\n }"},{"desc":"在&nbsp;js/custom&nbsp;目录下新建一个名称为&nbsp;ExampleB&nbsp;的普通类，并继承类&nbsp;ExampleA","code":" js.custom.ExampleB = function () {\n     this.b = function(){\n          return \"我是类B的公共方法\";\n     }\n     this.onCreate = function(parent){\n          console.log(\"打印父类保护方法 me 的返回值:\"+parent.me());\n     }\n }.extends(\"js.custom.ExampleA\");"},{"desc":"通过&nbsp;newInstance&nbsp;实例化&nbsp;ExampleB&nbsp;类，并调用相关的公共方法","code":"     var test = $jsmvc$.facade.newInstance(\"js.custom.ExampleB\");\n     //test 实例的 a、b 方法为公共方法，外界可以直接访问，而 me 为保护方法，只可在子类中访问\n     console.log(\"打印 test 实例的 b 方法返回值:\"+test.b());\n     console.log(\"打印 test 实例的父类 a 方法返回值:\"+test.a());"}]]},{"desc":"启动函数，需要在子类中重写该方法，该方法无需手动调用，当框架加载完毕时会自动调用，并且只会调用一次","param":[],"name":"startup","example":[[{"desc":"您需要在&nbsp;js&nbsp;根目录下创建一个新的&nbsp;js&nbsp;文件，并按照以下例子来添加&nbsp;facade&nbsp;类","code":" $jsmvc$.run.addFacade(function(){\n      //这里可以定义一些全局的属性、\n      this.x = \"示例\";//其它位置可通过 $jsmvc$.facade.x 来访问 x 属性\n      this.startup = function(){\n          //启动业务逻辑，您可以在这里初始化注册必须的模块、\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\").showPage();//注册 HelloWorld 模块并显示\n      }\n });"}]]}]},"example":[[{"desc":"您需要实现超类中的&nbsp;startup&nbsp;方法。并通过&nbsp;$jsmvc$.run.addFacade&nbsp;方法来添加&nbsp;facade&nbsp;实例。一开始需要注册的模块，可放在&nbsp;startup&nbsp;中进行注册","code":" $jsmvc$.run.addFacade(function(){\n      //这里可以定义一些全局的属性\n      this.x = \"示例\";//其它位置可通过 $jsmvc$.facade.x 来访问 x 属性\n      this.startup = function(){\n          //启动业务逻辑，您可以在这里初始化注册必须的模块、\n          $jsmvc$.facade.reqPage(\"js.page.HelloWorld\").showPage();//注册 HelloWorld 模块并显示\n      }\n });"},{"desc":"通过&nbsp;$jsmvc$.run.addFacade&nbsp;添加的类会自动继承&nbsp;FacadeAbs&nbsp;超类，您可以通过&nbsp;$jsmvc$.facade&nbsp;对象来访问超类中的方法和&nbsp;Facade&nbsp;实现类的方法","code":"     console.log($jsmvc$.facade.x);//控制台打印自定义 Facade 实现类的 x 属性\n     $jsmvc$.facade.reqModel(\"js.model.Hi\");//调用 Facade 超类的 reqModel 方法注册 Hi 模块\n     $jsmvc$.facade.sendBroadcast(\"TEST\");//调用 Facade 超类的 sendBroadcast 方法来发送一个名称为 TEST 的广播"}]],"notice":[]}});}
this.getList=function(){return protected.getData();}}
js.model.Language=function(){var lang={desc:{},word:{},title:{}};lang.desc["not_doc"]="没有%?%类的文档！~";lang.desc["not_code"]="<!-- 没有示例代码 -->";lang.word["related"]="相关";lang.word["desc"]="说明";lang.word["type"]="类型";lang.word["obj"]="对象";lang.word["evt"]="事件";lang.word["func"]="方法";lang.word["attr"]="属性";lang.word["notice"]="广播";lang.word["pub"]="[ 公共 ]";lang.word["pro"]="[ 保护 ]";lang.word["sta"]="[ 静态 ]";lang.word["param"]="参数";lang.word["ret"]="返回";lang.title["0"]="摘要：";lang.title["1"]="示例%?%：";lang.title["2"]="成员：";lang.title["3"]="继承：";lang.title["4"]="事件概述：";lang.title["5"]="方法概述：";lang.title["6"]="使用示例%?%：";this.getLang=function(model,id,rep){var route=model.split(".");var ret=lang;for(var i=0;i<route.length;i++){ret=ret[route[i]];if(!ret){return null;}}
ret=ret[""+id];if(!ret){return null;}
ret=ret.split("%?%");var text=ret[0];for(var i=0;typeof rep=="object"&&i<ret.length-1;i++){if(rep[i]!==undefined){text+=rep[i];}else{text+="%null%";}
text+=ret[i+1];}
return text;}}
js.model.MenuList=function(){var protected;var docName={v:"JsMvc DOCS"};var docVersion={v:""};this.onCreate=function(p){protected=p;p.setData([{"name":"$jsmvc$","list":["run"]},{"name":"$jsmvc$.core","list":["ControAbs","FacadeAbs","ModelAbs","PageAbs"]}]);}
this.getList=function(){return protected.getData();}
this.getName=function(){return docName.v;}
this.getVersion=function(){return docVersion.v;}}
js.page.Cont=function(){var self=this;var html;var protected;this.onCreate=function(p){protected=p;html=p.setDisplay($(js.tpl.ContTpl()));p.setStage($jsmvc$.facade.reqPage("js.page.Layout").getRight());var ls=html.find("*[id]");var len=ls.length;for(var i=0;i<len;i++){html[ls[i].id]=$(ls[i]);}
html.toTop.hide();protected.getStage().scroll(function(){if($(this).scrollTop()>100){html.toTop.fadeIn();}else{html.toTop.fadeOut();}});html.toTop.click(function(e){e.preventDefault();protected.getStage().animate({scrollTop:0},400);});}
this.showPage=function(className){self.supers.showPage();html.classMain.nextAll("div[id^='funcMain']").remove();var data=$jsmvc$.facade.reqModel("js.model.ContList").getList()[className];var lang=$jsmvc$.facade.reqPage("js.model.Language");if(!data){html.notDoc.html(lang.getLang("desc","not_doc",[className?className:lang.getLang("word","related")]));html.notDoc.show();html.classMain.hide();protected.getStage().scrollTop(0);protected.getStage().trigger("scroll");return;}
html.notDoc.hide();html.classMain.show();html.class_name.html(className);if(data.desc){html.class_desc.show();html.class_desc.children("h2").html(lang.getLang("title","0"));html.class_desc.children("p").html(data.desc);}else{html.class_desc.hide();}
if(data.example&&data.example.length>0){html.class_example.show();html.class_example.empty();for(var i=0;i<data.example.length;i++){var exa=data.example[i];var hItem=html.class_example_t.clone();hItem.html(lang.getLang("title","1",[data.example.length>1?(i+1):""]));html.class_example.append(hItem);for(var j=0;j<exa.length;j++){var childExa=exa[j];var pItem=html.class_example_desc.clone();var preItem=html.class_example_code.clone();pItem.html(childExa.desc?childExa.desc:"");html.class_example.append(pItem);if(childExa.code){preItem.html(childExa.code);html.class_example.append(preItem);}}}}else{html.class_example.hide();}
if(data.statement=="object"){if(data.func){delete data.func.pro;delete data.func.sta;}
if(data.attr){delete data.attr.pro;delete data.attr.sta;}
if(data.evt){delete data.evt.pro;}}
if(data.func&&((data.func.pub&&data.func.pub.length>0)||(data.func.pro&&data.func.pro.length>0)||(data.func.sta&&data.func.sta.length>0))||data.attr&&((data.attr.pub&&data.attr.pub.length>0)||(data.attr.pro&&data.attr.pro.length>0)||(data.attr.sta&&data.attr.sta.length>0))||data.evt&&((data.evt.pub&&data.evt.pub.length>0)||(data.evt.pro&&data.evt.pro.length>0))||(data.notice&&data.notice.length>0)){html.class_member.show();html.class_member.children("h2").html(lang.getLang("title","2"));html.class_member.children(":gt(0)").remove();function createFunc(type,evt){var func=html.class_member_func.clone();var func_item=func.find("tr:eq(1)").clone();var tit=evt?lang.getLang("word","evt"):lang.getLang("word","func");if(data.statement=="object"){tit=lang.getLang("word","obj")+tit;}else{tit+=" "+lang.getLang("word",type);}
func.find("tr:eq(0)").children("th:eq(0)").html(tit);func.find("tr:eq(0)").children("th:eq(1)").html(lang.getLang("word","desc"));func.find("tr:gt(0)").remove();for(var i=0;i<data[evt?"evt":"func"][type].length;i++){var func_item_new=func_item.clone();var itemData=data[evt?"evt":"func"][type][i];var funcName=(type=="sta"||data.statement=="object"?className:(type=="pro"?"protected":"this"))+"."+itemData.name+" ( ";for(var j=0;itemData.param&&j<itemData.param.length;j++){funcName+=(j>0?", ":"")+itemData.param[j].name;}
func_item_new.children("td:eq(0)").html("<a href=\"#funcMain_"+itemData.name+"\">"+funcName+" ) </a>");func_item_new.children("td:eq(1)").html(itemData.desc);func.append(func_item_new);}
html.class_member.append(func);}
if(data.func&&data.func.pub&&data.func.pub.length>0){createFunc("pub",false);}
if(data.func&&data.func.pro&&data.func.pro.length>0){createFunc("pro",false);}
if(data.func&&data.func.sta&&data.func.sta.length>0){createFunc("sta",false);}
if(data.evt&&data.evt.pub&&data.evt.pub.length>0){createFunc("pub",true);}
if(data.evt&&data.evt.pro&&data.evt.pro.length>0){createFunc("pro",true);}
function createAttr(type,notice){var attr=html.class_member_attr.clone();var attr_item=attr.find("tr:eq(1)").clone();var tit=notice?lang.getLang("word","notice"):lang.getLang("word","attr");if(data.statement=="object"){tit=lang.getLang("word","obj")+tit;}else if(!notice){tit+=" "+lang.getLang("word",type);}
attr.find("tr:eq(0)").children("th:eq(0)").html(tit);attr.find("tr:eq(0)").children("th:eq(1)").html(lang.getLang("word","type"));attr.find("tr:eq(0)").children("th:eq(2)").html(lang.getLang("word","desc"));attr.find("tr:gt(0)").remove();for(var i=0;i<(notice?data.notice.length:data.attr[type].length);i++){var attr_item_new=attr_item.clone();var itemData=notice?data.notice[i]:data.attr[type][i];var funcName=notice?itemData.name:(type=="sta"||data.statement=="object"?className:(type=="pro"?"protected":"this"))+"."+itemData.name;attr_item_new.children("td:eq(0)").html(funcName);attr_item_new.children("td:eq(1)").html(itemData.type);attr_item_new.children("td:eq(2)").html(itemData.desc);attr.append(attr_item_new);}
html.class_member.append(attr);}
if(data.attr&&data.attr.pub&&data.attr.pub.length>0){createAttr("pub");}
if(data.attr&&data.attr.pro&&data.attr.pro.length>0){createAttr("pro");}
if(data.attr&&data.attr.sta&&data.attr.sta.length>0){createAttr("sta");}
if(data.notice&&data.notice.length>0){createAttr(null,true);}}else{html.class_member.hide();}
if(data.exte){html.class_exte.show();html.class_exte.children("h2").html(lang.getLang("title","3"));var a=html.class_exte.children("a:eq(0)");a.html(data.exte);a.off("click").on("click",function(){self.showPage(data.exte);});}else{html.class_exte.hide();}
function createFuncList(obj,type,isEvt){var item=html.funcMain.clone();if(data.statement=="object"){item.find("#func_name").html(obj.name);}else{item.find("#func_name").html(obj.name+"<span>"+lang.getLang("word",type)+"</span>");}
if(obj.desc){item.find("#func_desc").children("p").html(obj.desc);item.find("#func_desc").children("h4").html(isEvt?lang.getLang("title","4"):lang.getLang("title","5"));}else{item.find("#func_desc").remove();}
if(!obj.param&&!obj.ret){item.find("#func_io").remove();}else{var fincIo=item.find("#func_io");var funcIoParam=fincIo.find("#func_io_param");var funcIoRet=fincIo.find("#func_io_ret");if(!obj.param||obj.param.length==0){funcIoParam.remove();}else{funcIoParam.find("th:eq(0)").html(lang.getLang("word","param"));funcIoParam.find("th:eq(1)").html(lang.getLang("word","type"));funcIoParam.find("th:eq(2)").html(lang.getLang("word","desc"));var tr=funcIoParam.find("tr:eq(1)");tr.remove();for(var i=0;i<obj.param.length;i++){var trItem=tr.clone();var p=obj.param[i];trItem.children("td:eq(0)").html(p.name);trItem.children("td:eq(1)").html(p.type);trItem.children("td:eq(2)").html(p.desc?p.desc:"");funcIoParam.append(trItem);}}
if(!obj.ret){funcIoRet.remove();}else{funcIoRet.find("th:eq(0)").html(lang.getLang("word","ret"));funcIoRet.find("th:eq(1)").html(lang.getLang("word","desc"));funcIoRet.find("tr:eq(1)").children("td:eq(0)").html(obj.ret.type);funcIoRet.find("tr:eq(1)").children("td:eq(1)").html(obj.ret.desc?obj.ret.desc:"");}}
var example=item.find("#func_example");example.remove();for(i=0;obj.example&&i<obj.example.length;i++){var exampleItem=example.clone();var exampleObj=obj.example[i];exampleItem.children("h4").html(lang.getLang("title","6",[obj.example.length>1?(i+1):""]));var p=exampleItem.children("p");p.remove();var pre=exampleItem.children("pre");pre.remove();for(var j=0;j<exampleObj.length;j++){var nP=p.clone();var nPre=pre.clone();var nObj=exampleObj[j];nP.html(nObj.desc?nObj.desc:"");exampleItem.append(nP);if(nObj.code){nPre.html(nObj.code);exampleItem.append(nPre);}}
if(!obj.param&&!obj.ret){item.find("#func_desc").after(exampleItem);}else{item.find("#func_io").after(exampleItem);}}
item.attr("id","funcMain_"+obj.name);html.classMain.after(item);}
for(var i=0;data.evt&&data.evt.pro&&i<data.evt.pro.length;i++){createFuncList(data.evt.pro[data.evt.pro.length-1-i],"pro",true);}
for(var i=0;data.evt&&data.evt.pub&&i<data.evt.pub.length;i++){createFuncList(data.evt.pub[data.evt.pub.length-1-i],"pub",true);}
for(var i=0;data.func&&data.func.sta&&i<data.func.sta.length;i++){createFuncList(data.func.sta[data.func.sta.length-1-i],"sta");}
for(var i=0;data.func&&data.func.pro&&i<data.func.pro.length;i++){createFuncList(data.func.pro[data.func.pro.length-1-i],"pro");}
for(var i=0;data.func&&data.func.pub&&i<data.func.pub.length;i++){createFuncList(data.func.pub[data.func.pub.length-1-i],"pub");}
SyntaxHighlighter.defaults.gutter=false;SyntaxHighlighter.highlight();protected.getStage().scrollTop(0);protected.getStage().trigger("scroll");}}
js.page.Layout=function(){var self=this;var left;var right;var protected;this.onCreate=function(p){protected=p;p.setStage(document.body);var html=protected.setDisplay($(js.tpl.LayoutTpl()));var ls=html.find("*[id]");var len=ls.length;for(var i=0;i<len;i++){html[ls[i].id]=$(ls[i]);}
left=html.left;right=html.right;}
this.getLeft=function(){return left;}
this.getRight=function(){return right;}
var changeWindows=function(){var win=$(window);var width=win.width();var height=win.height();left.css({height:height+"px",width:width*0.2+"px"});right.css({height:height+"px"});$jsmvc$.facade.sendBroadcast($jsmvc$.facade.WINDOW_RESIZE,{width:width,height:height});}
this.showPage=function(){self.supers.showPage();$(window).off("resize",changeWindows).on("resize",changeWindows).trigger("resize");}}
js.page.Menu=function(){var self=this;var html;var protected;this.onCreate=function(p){protected=p;html=p.setDisplay($(js.tpl.MenuTpl()));p.setStage($jsmvc$.facade.reqPage("js.page.Layout").getLeft());var ls=html.find("*[id]");var len=ls.length;for(var i=0;i<len;i++){html[ls[i].id]=$(ls[i]);}
var modeData=$jsmvc$.facade.reqModel("js.model.MenuList");if(modeData.getVersion()){html.children("p:eq(0)").html(modeData.getName()+" - Version "+modeData.getVersion());}else{html.children("p:eq(0)").html(modeData.getName());}
var list=modeData.getList();var ul=html.children("ul");ul.empty();if(!list||typeof list!="object"||list.length==0){$jsmvc$.facade.reqPage("js.page.Cont").showPage();}else{for(var i=0;i<list.length;i++){var item=html.tpl.clone();var data=list[i];var span=item.children("span");span.html(data.name);if(!data.list||typeof data.list!="object"||data.list.length<1){item.children("ul").remove();item.removeClass("file");item.addClass("js");span.attr("id",data.name);FastClick.attach(span.get(0));span.on("click",(function(className){return function(){select(className,$(this));}})(data.name));if(i==0){span.trigger("click");}}else{item.removeClass("js");item.addClass("file");var childUL=item.find("ul:eq(0)");var childLI=childUL.children("li:eq(0)");childUL.empty();for(var j=0;j<data.list.length;j++){var childLIItem=childLI.clone();var childSpan=childLIItem.children("span");childSpan.html(data.list[j]);childSpan.attr("id",data.list[j]);FastClick.attach(childSpan.get(0));childSpan.on("click",(function(className){return function(){select(className,$(this));}})(data.name+"."+data.list[j]));childUL.append(childLIItem);if(i==0&&j==0){childSpan.trigger("click");}}
if(i!=0){childUL.hide();childUL.attr("hide",true);}
FastClick.attach(span.get(0));span.on("click",function(){html.css({width:"auto"});html.removeClass("menuBlock");html.addClass("menuInline");var ul=$(this).next("ul");if(ul.attr("hide")=="true"){ul.show();ul.attr("hide",false);}else{ul.hide();ul.attr("hide",true);}
html.css({width:html.innerWidth()+"px"});html.removeClass("menuInline");html.addClass("menuBlock");});}
ul.append(item);}}}
var select=function(className,obj){html.find(".opt").removeClass("opt");obj.parent().addClass("opt");$jsmvc$.facade.reqPage("js.page.Cont").showPage(className);}
this.showPage=function(){self.supers.showPage();html.css({width:html.innerWidth()+"px"});html.removeClass("menuInline");html.addClass("menuBlock");}}
js.tpl.ContTpl=function(){return'<div class="cont">\
        <span id="toTop" style="display: inline;"></span>\
        <h1 id="notDoc"></h1>\
        <div id="classMain">\
            <h1 id="class_name"><!--类名--></h1>\
            <div id="class_desc">\
                <h2><!--摘要--></h2>\
                <p><!--类描述--></p>\
            </div>\
            <div id="class_example">\
                <h2 id="class_example_t"><!--示例--></h2>\
                <p id="class_example_desc"><!--示例说明--></p>\
                <pre class="brush: jscript;" id="class_example_code"><!--类使用示例--></pre>\
            </div>\
            <div id="class_member">\
                <h2><!--成员--></h2>\
                <table cellspacing="0" cellpadding="3" border="1" id="class_member_func">\
                    <tr><th width="30%"><!--公共方法--></th><th width="70%"><!--说明--></th></tr>\
                    <tr>\
                        <td><a href="#" title=""><!--方法名称--></a></td>\
                        <td><!--方法概要--></td>\
                    </tr>\
                </table>\
                <table cellspacing="0" cellpadding="3" border="1" id="class_member_attr">\
                    <tr><th width="30%"><!--公共属性--></th><th width="10%"><!--类型--></th><th width="60%"><!--说明--></th></tr>\
                    <tr id="">\
                        <td><!--属性名称--></td>\
                        <td><!--属性类型--></td>\
                        <td><!--属性说明--></td>\
                    </tr>\
                </table>\
            </div>\
            <div id="class_exte">\
                <h2><!--继承--></h2>\
                <a href="#"><!--继承类名称--></a>\
            </div>\
            <hr />\
        </div>\
\
        <!-- 方法模版 -->\
\
        <div id="funcMain">\
            <h3 id="func_name"><!--方法名称--></h3>\
            <div id="func_desc">\
                <h4><!--方法摘要--></h4>\
                <p><!--方法描述--></p>\
            </div>\
            <div id="func_io">\
                <table cellspacing="0" cellpadding="3" border="1" id="func_io_param">\
                    <tr><th width="30%"><!--参数--></th><th width="10%"><!--类型--></th><th width="60%"><!--说明--></th></tr>\
                    <tr>\
                        <td><!--参数名称--></td>\
                        <td><!--参数类型--></td>\
                        <td><!--参数说明--></td>\
                    </tr>\
                </table>\
                <table cellspacing="0" cellpadding="3" border="1" id="func_io_ret">\
                    <tr><th width="30%"><!--返回--></th><th width="70%"><!--说明--></th></tr>\
                    <tr>\
                        <td><!--返回类型--></td>\
                        <td><!--返回描述--></td>\
                    </tr>\
                </table>\
            </div>\
            <div id="func_example">\
                <h4><!--示例--></h4>\
                <p id="func_example_desc"><!--示例说明--></p>\
                <pre class="brush: jscript;"><!--方法使用示例--></pre>\
            </div>\
            <hr />\
        </div>\
        <div class="jsmvcDocs">@2016 <span>JsMvc.cn - by <a href="http://jsmvc.cn/JsmvcDocsBuilder/" target="_blank">JsmvcDocsBuilder</a></span></div>\
    </div>\
    ';}
js.tpl.LayoutTpl=function(){return'<div class="layout">\
        <div id="left"></div>\
        <div id="right"></div>\
        <div id="clear"></div>\
    </div>\
    ';}
js.tpl.MenuTpl=function(){return'<div class="menu menuInline">\
        <p>JsMvc API - Version 1.0</p>\
        <ul>\
            <li class="js opt"><span>run</span></li>\
            <li class="file" id="tpl">\
                <span>core</span>\
                <ul>\
                    <li class="js"><span>FacadeAbs</span></li>\
                    <li class="js"><span>ModelAbs</span></li>\
                    <li class="js"><span>PageAbs</span></li>\
                </ul>\
            </li>\
        </ul>\
    </div>\
    ';}